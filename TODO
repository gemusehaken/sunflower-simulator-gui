
TODO: button that toggles the node boxes from logical (as it is now), to
a 2-D projection, to a 3-D view.  Should be able to reuse most of the
existing code to catch button clicks, just changing the location of the boxes.
for 3-D view, show them as cubes rather than squares


TODO: add additional color code which signifies whether no is asleep or active.
This will be very useful for debugging / visualizing benchmarks like S-MAC,
where the virtual clusters sync their sleep schedules

TODO: add another view of nodes that is not the regular grid, but is based on the node locations in three space. Give a choice of 2-d or 3-d view, and it
also should not be too difficult to enable rotation of the viewpoint.
Isn't there an inferno polyhedron app that permits such rotation ?

TODO: Create a plugin / inferno app that can parse google sketchup data and turn it
into a series of commands for configuring / creating signal / interference
sources, instantiating nodes, etc.  Or get vasil to donate lineart for
this purpose ?

TODO: enable movement of blobs representing nodes, and in response to movement,
send a SETLOC command into the nodes ctl file. Also, when updating the nodes
display, if we are in "spatial display" mode, update the location of nodes.

TODO: show network-related current state of each node, maybe with a
small icon inside the node (difficult when we have lots of nodes
and the boxes are small) or color code, to show you whether node is
transmitting, recieving, idle, listening, collision, frameerror, etc.  This will be
very useful for debugging, when we want to look at network and "see"
what nodes are doing what


BUG: on windows, cannot attach to #U error

> TODO: quit command send quit to the /prog of the current host.
>       it should send it to the host w/ the gui instead
> 
>       permit the splice threads to be running on a specified
>       host, so that way we can have the splice thread running
>       e.g., on a node within the cluster in amazon ec2 being used
> 
>       connecting to a host already connected is broken
> 
>       add a menu for amazon ec2 and s3 facilities
> 



#	TODO: the macos system font is LucidaGrande. I have put a ttf version
#		in ttf/, but for Tk menus, we need to use ttf2subf to
#		convert them to inferno subfont 

#TODO:
#	bug: we freak out when multiple simulation hosts have same name
#	bug: handle dead simulation hosts more cleanly
#	bug: add a command to enable/disable repeatedly reading the siminfo
#		and netin/netout files. add a button.
#	misc: 
#
#TODO: for scrolling up/down  and left/right, use button like
#     the new amazon look-inside forward-back buttons: about 
#	5px high, medium grey, with a white triangle in the middle
#	for up/down/left/right.  highlight on mouseover
#
#TODO: a tabbed bar at the bottom of the siminfo window
#	to select the output of different nodes.  Highlight on mouseover
#
#TODO:	maintain a PScrollabletxt (or whatever i called it) per
#	node listed in topology screen, and associate a curloc
#	i.e., where in scroll we are as part of default Pscrollabletxt






















#	TODO: make the front-end dynamically code-updatable, via a
#	"re-build" or "reload" command to enginectl. To do this,
#	break mgui up into a module for each thread, e.g.
#	msgsdisplay() etc, so when we get a "reload" command,
#	we kill the threads and re-load the new code for the
#	threads from disk.
#
#	The argument for doing this is that it makes it possible
#	to extend and/or debug Mgui even while running a long-running
#	simulation. The filesystem interface gives us that to some
#	extent...

*	a copy of mouse events should be delivered to thresds which do things like
	-	Flashing cursor based on mouse location
	-	Dim/tranparent non-active windows
Each node is assigned a color, and this color is the
color of the tab (green in the prototype gui image),
as well as the tab of the output display (right box
in the prototype gui).

A separate Image ADT is maintained for each node,, and
when any output is written, it is written to this
Image and that is what is displayed on the "message"
pane. When a "setnode" is done, the pane for the node
is swapped in. Likewise clicking on any node in the
topology window.

The topology window is divvied up into several boxes,
based on the number of nodes created. The colors of the
nodes in the topology window are same color used for
the tab. The current node has a 3-pixel black border.

TODO:
(1) the messages pane should be used for topology and
vice versa. Also move the color tab over.
(2) "+/-" button at the bottom of the topology node to add
and delete nodes
(3) bottom 5mm of topology node should contian above botton,
and when a node delete is requested, an orange "please confirm"
button appears in the left hand corner, and then subsequently
disappears after being clicked. This bar also contains a brief
summary of the node info (VDD, freq etc.). IT should be
possible to specify for each node what info to display on this
bar.





Imglib:
This module provides various useful graphics facilities, centered around
the Image adt

	*	antialiased versions of all the Image drawing primitives
	*	Image scaling using a variety of different algorithms

This really should be a built-in module, since all its components are
fairly compute intensive, and may be used in time-critical applications
(e.g., UI, video stream, etc).

On further though, the best solution might be to extend the existing
implementation ?  

A good reference besides the CGPP book is also various articles in
DDJ, and also http://www.compuphase.com/graphic/scale3.htm and other
articles on the above site

*	A filesystem interface, which mirrors the functionality, and
	this interface can be imported from an implementation of
	imglib ont he blackfin...


**** 	All this functionality should just be moved to Pgui	*****









TopologyGuUI module:
This is a module for depicting and creating contour diagrams,
and overlaying (with transparency, etc) node locations and
a summary of node info.

It takes as initialization a ref Image and a channel on
which commands to add a new node are sent, and does all the
operations on that ref image (buffering onto an offscreen
image and rendering in one go, of course).

To draw the contour plots, it calls upon a separate module,
which, given a ref Image and a series of mouse clicks, lets you
	*	right click and drag to create a new circle
	*	click in the vicinity of a point on the
		circle and drag to change the contour
	*	??? uhm, this seems like its getting weird.

In the majority of the area, the contour map is shown, or
just plain beige space. At the bottom is a row corresponding
to a set of nodes. Clicking on the button corresponding to
a node highlights it; clicking on the contour then sets the
position of the node on the contour map.

Buttons
	*	"newnode"
	*	one button for each existing node

Entry boxes
	*	Horizontal/Vert max extent (the actual usnits 
		are suibject to interpretation

	*	Editable boxes for each of the parameters
		that can be config'd on a node, e.g., VDD, scalealpha,
		etc	










PguiFS module:

To make it easier to track where in the FS your new entry was
created, so you dont have to do  the extra changedir, when at a given
point in the hierarchy you write, e.g., "newscrollabletext ((0,0), (5,5))
which is a Rect relative to the rect of the current window in whose dir you
are, then when you read (withut closing), and you get back "ok", the
server automatically moves your fid to point to the qid of the ctl
file of the new window you've created.

Display->namedimage() takes a string, the name of a public
image and returns a ref Image to that named Image.










FontSelector module:
A font selector tool that uses PGui, fashioned after
Type test tools at Linotype.com and Emmigre.com.






ColorSelector Module:


A color selection tool built using Pgui. Provides
much of the functionality of OSX's color selection
utility.
